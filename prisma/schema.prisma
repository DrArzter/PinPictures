generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Chats {
  id              Int               @id @default(autoincrement())
  name            String            @default("Unnamed")
  createdAt       DateTime          @default(now())
  picpath         String            @default("uploads/chats/default_avatar.jpg")
  ChatType        Chats_ChatType    @default(private)
  MessagesInChats MessagesInChats[]
  UsersInChats    UsersInChats[]
}

model Comments {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  comment   String
  picpath   String?
  createdAt DateTime @default(now())
  Post      Post     @relation(fields: [postId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@index([postId], map: "Comments_postId_fkey")
  @@index([userId], map: "Comments_userId_fkey")
}

model Friendships {
  id                             Int                @id @default(autoincrement())
  user1Id                        Int
  user2Id                        Int
  createdAt                      DateTime           @default(now())
  status                         Friendships_status @default(pending)
  User_Friendships_user1IdToUser User               @relation("Friendships_user1IdToUser", fields: [user1Id], references: [id])
  User_Friendships_user2IdToUser User               @relation("Friendships_user2IdToUser", fields: [user2Id], references: [id])

  @@unique([user1Id, user2Id])
  @@index([user2Id], map: "Friendships_user2Id_fkey")
}

model ImageInPost {
  id        Int    @id @default(autoincrement())
  picpath   String
  bucketkey String
  postId    Int
  Post      Post   @relation(fields: [postId], references: [id])

  @@index([postId], map: "ImageInPost_postId_fkey")
}

model ImagesInMessages {
  id              Int             @id @default(autoincrement())
  messageId       Int
  picpath         String
  bucketkey       String
  MessagesInChats MessagesInChats @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId], map: "ImagesInMessages_messageId_fkey")
}

model Likes {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  Post      Post     @relation(fields: [postId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
  @@index([postId], map: "Likes_postId_fkey")
}

model MessagesInChats {
  id               Int                @id @default(autoincrement())
  userId           Int
  chatId           Int
  message          String
  createdAt        DateTime           @default(now())
  ImagesInMessages ImagesInMessages[]
  Chats            Chats              @relation(fields: [chatId], references: [id])
  User             User               @relation(fields: [userId], references: [id])

  @@index([chatId], map: "MessagesInChats_chatId_fkey")
  @@index([userId], map: "MessagesInChats_userId_fkey")
}

model Post {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime      @default(now())
  authorId    Int
  likesCount  Int           @default(0)
  Comments    Comments[]
  ImageInPost ImageInPost[]
  Likes       Likes[]
  User        User          @relation(fields: [authorId], references: [id])

  @@index([authorId], map: "Post_authorId_fkey")
}

model User {
  id                                    Int               @id @default(autoincrement())
  name                                  String            @unique
  description                           String?
  bananaLevel                           Int               @default(0)
  email                                 String            @unique
  password                              String
  createdAt                             DateTime          @default(now())
  lastLoginAt                           DateTime          @default(now())
  banned                                Boolean           @default(false)
  avatar                                String
  background                            String
  settings                              Json
  uiBackground                          String            @default("https://storage.yandexcloud.net/pinpictures/otherImages/background2.jpeg")
  Comments                              Comments[]
  Friendships_Friendships_user1IdToUser Friendships[]     @relation("Friendships_user1IdToUser")
  Friendships_Friendships_user2IdToUser Friendships[]     @relation("Friendships_user2IdToUser")
  Likes                                 Likes[]
  MessagesInChats                       MessagesInChats[]
  Post                                  Post[]
  UsersInChats                          UsersInChats[]
}

model UsersInChats {
  id       Int      @id @default(autoincrement())
  userId   Int
  chatId   Int
  joinedAt DateTime @default(now())
  Chats    Chats    @relation(fields: [chatId], references: [id])
  User     User     @relation(fields: [userId], references: [id])

  @@unique([userId, chatId])
  @@index([chatId], map: "UsersInChats_chatId_fkey")
}

enum Chats_ChatType {
  private
  group
}

enum Friendships_status {
  pending
  confirmed
  blocked
}
