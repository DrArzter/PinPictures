generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum NotificationType{
  error
  success
  info
}

enum NotificationSourceType{
  post
  user
  comment
  message
  friendship
}

model Notifications {
  id              Int      @id @default(autoincrement())
  type            String
  message         String
  category        String   @default("general")
  sourceId        Int?
  sourceType      NotificationSourceType
  actionType      String?
  actionUrl       String?
  relatedEntityId Int?
  relatedEntity   String?
  createdAt       DateTime @default(now())
  expiresAt       DateTime?
  seen            Boolean  @default(false)
  seenAt          DateTime?
  user            User     @relation("UserNotifications")

  @@index([createdAt], map: "Notifications_createdAt_fkey")
  @@index([seen], map: "Notifications_seen_fkey")
}


model User {
  id           Int               @id @default(autoincrement())
  name         String            @unique
  bananaLevel  Int               @default(0)
  email        String            @unique
  password     String
  avatar       String
  background   String
  uiBackground String            @default("https://storage.yandexcloud.net/pinpictures/otherImages/background2.jpeg")
  createdAt    DateTime          @default(now())
  lastLoginAt  DateTime          @default(now())
  banned       Boolean           @default(false)
  settings     Json
  comments     Comments[]
  friendships  Friendships[]     @relation("User1Friendship")
  friendships2 Friendships[]     @relation("User2Friendship")
  likes        Likes[]
  messages     MessagesInChats[]
  posts        Post[]
  usersinchats UsersInChats[]
  Notifications Notifications[]
}

model Post {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime      @default(now())
  authorId    Int
  likesCount  Int           @default(0)
  comments    Comments[]
  images      ImageInPost[]
  likes       Likes[]
  author      User          @relation(fields: [authorId], references: [id])

  @@index([authorId], map: "Post_authorId_fkey")
}

model ImageInPost {
  id        Int    @id @default(autoincrement())
  picpath   String
  bucketkey String
  postId    Int
  post      Post   @relation(fields: [postId], references: [id])

  @@index([postId], map: "ImageInPost_postId_fkey")
}

model Comments {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  comment   String
  picpath   String?
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  author    User     @relation(fields: [userId], references: [id])

  @@index([postId], map: "Comments_postId_fkey")
  @@index([userId], map: "Comments_userId_fkey")
}

model Likes {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  author    User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
  @@index([postId], map: "Likes_postId_fkey")
}

model Chats {
  id        Int               @id @default(autoincrement())
  name      String            @default("Unnamed")
  createdAt DateTime          @default(now())
  picpath   String            @default("uploads/chats/default_avatar.jpg")
  ChatType  ChatType          @default(private)
  messages  MessagesInChats[]
  users     UsersInChats[]
}

model UsersInChats {
  id       Int      @id @default(autoincrement())
  userId   Int
  chatId   Int
  joinedAt DateTime @default(now())
  chat     Chats    @relation(fields: [chatId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, chatId])
  @@index([chatId], map: "UsersInChats_chatId_fkey")
}

model MessagesInChats {
  id        Int                @id @default(autoincrement())
  userId    Int
  chatId    Int
  message   String
  createdAt DateTime           @default(now())
  images    ImagesInMessages[] @relation("MessageImages")
  chat      Chats              @relation(fields: [chatId], references: [id])
  author    User               @relation(fields: [userId], references: [id])

  @@index([chatId], map: "MessagesInChats_chatId_fkey")
  @@index([userId], map: "MessagesInChats_userId_fkey")
}

model ImagesInMessages {
  id        Int             @id @default(autoincrement())
  messageId Int
  picpath   String
  bucketkey String
  message   MessagesInChats @relation("MessageImages", fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId], map: "ImagesInMessages_messageId_fkey")
}

model Friendships {
  id        Int      @id @default(autoincrement())
  user1Id   Int
  user2Id   Int
  createdAt DateTime @default(now())
  status    Status   @default(pending)
  user1     User     @relation("User1Friendship", fields: [user1Id], references: [id])
  user2     User     @relation("User2Friendship", fields: [user2Id], references: [id])

  @@unique([user1Id, user2Id])
  @@index([user2Id], map: "Friendships_user2Id_fkey")
}

enum ChatType {
  private
  group
}

enum Status {
  pending
  confirmed
  blocked
}
